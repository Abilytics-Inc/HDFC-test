name: Blue-Green Deployment

on:
  push:
    branches:
      - main

jobs:
  blue-green-deploy:
    name: Deploy to ECS via CodeDeploy
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Build and Push Docker Image to ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Docker Image
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)
          ECR_REPOSITORY=<your-ecr-repo-name>
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          REGION=${{ secrets.AWS_REGION }}
          IMAGE_URI="$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG"
          
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      # Step 4: Create an AppSpec File for CodeDeploy
      - name: Generate AppSpec File
        run: |
          cat <<EOF > appspec.yaml
          version: 1
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: ${{ env.IMAGE_URI }}
                  LoadBalancerInfo:
                    ContainerName: <container-name>
                    ContainerPort: 80
          EOF

      # Step 5: Deploy using CodeDeploy
      - name: Start Deployment
        run: |
          APPLICATION_NAME=<your-codedeploy-application-name>
          DEPLOYMENT_GROUP=<your-codedeploy-deployment-group-name>

          aws deploy create-deployment \
            --application-name $APPLICATION_NAME \
            --deployment-group-name $DEPLOYMENT_GROUP \
            --revision "{\"revisionType\":\"AppSpecContent\",\"appSpecContent\":{\"content\":\"$(cat appspec.yaml | base64)\"}}" \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce

      # Step 6: Monitor Deployment
      - name: Monitor Deployment
        run: |
          DEPLOYMENT_ID=$(aws deploy list-deployments \
            --application-name $APPLICATION_NAME \
            --deployment-group-name $DEPLOYMENT_GROUP \
            --include-only-statuses InProgress \
            --query "deployments[0]" --output text)

          if [ "$DEPLOYMENT_ID" == "None" ]; then
            echo "No deployment found."
            exit 1
          fi

          echo "Deployment started: $DEPLOYMENT_ID"
          aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID
          echo "Deployment successful!"
